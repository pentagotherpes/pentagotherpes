using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace EasyExploits
{
	internal class DLLInjection
	{
		public enum DllInjectionResult
		{
			DllNotFound,
			GameProcessNotFound,
			InjectionFailed,
			Success
		}

		public sealed class DllInjector
		{
			private static readonly IntPtr INTPTR_ZERO;

			private static DLLInjection.DllInjector _instance;

			public static DLLInjection.DllInjector GetInstance
			{
				get
				{
					if (DLLInjection.DllInjector._instance == null)
					{
						DLLInjection.DllInjector._instance = new DLLInjection.DllInjector();
					}
					return DLLInjection.DllInjector._instance;
				}
			}

			static DllInjector()
			{
				DLLInjection.DllInjector.INTPTR_ZERO = (IntPtr)0;
			}

			private DllInjector()
			{
			}

			private bool bInject(uint pToBeInjected, string sDllPath)
			{
				IntPtr intPtr = DLLInjection.DllInjector.OpenProcess(1082u, 1, pToBeInjected);
				if (intPtr == DLLInjection.DllInjector.INTPTR_ZERO)
				{
					return false;
				}
				IntPtr procAddress = DLLInjection.DllInjector.GetProcAddress(DLLInjection.DllInjector.GetModuleHandle("kernel32.dll"), "LoadLibraryA");
				if (procAddress == DLLInjection.DllInjector.INTPTR_ZERO)
				{
					return false;
				}
				IntPtr intPtr2 = DLLInjection.DllInjector.VirtualAllocEx(intPtr, (IntPtr)0, (IntPtr)sDllPath.Length, 12288u, 64u);
				if (intPtr2 == DLLInjection.DllInjector.INTPTR_ZERO)
				{
					return false;
				}
				byte[] bytes = Encoding.ASCII.GetBytes(sDllPath);
				if (DLLInjection.DllInjector.WriteProcessMemory(intPtr, intPtr2, bytes, (uint)bytes.Length, 0) == 0)
				{
					return false;
				}
				if (DLLInjection.DllInjector.CreateRemoteThread(intPtr, (IntPtr)0, DLLInjection.DllInjector.INTPTR_ZERO, procAddress, intPtr2, 0u, (IntPtr)0) == DLLInjection.DllInjector.INTPTR_ZERO)
				{
					return false;
				}
				DLLInjection.DllInjector.CloseHandle(intPtr);
				return true;
			}

			[DllImport("kernel32.dll", SetLastError = true)]
			private static extern int CloseHandle(IntPtr hObject);

			[DllImport("kernel32.dll", SetLastError = true)]
			private static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttribute, IntPtr dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

			[DllImport("kernel32.dll", SetLastError = true)]
			private static extern IntPtr GetModuleHandle(string lpModuleName);

			[DllImport("kernel32.dll", SetLastError = true)]
			private static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

			public DLLInjection.DllInjectionResult Inject(string sProcName, string sDllPath)
			{
				if (!File.Exists(sDllPath))
				{
					return DLLInjection.DllInjectionResult.DllNotFound;
				}
				uint num = 0u;
				Process[] processes = Process.GetProcesses();
				for (int i = 0; i < processes.Length; i++)
				{
					if (!(processes[i].ProcessName != sProcName))
					{
						num = (uint)processes[i].Id;
						break;
					}
				}
				if (num == 0u)
				{
					return DLLInjection.DllInjectionResult.GameProcessNotFound;
				}
				if (!this.bInject(num, sDllPath))
				{
					return DLLInjection.DllInjectionResult.InjectionFailed;
				}
				return DLLInjection.DllInjectionResult.Success;
			}

			[DllImport("kernel32.dll", SetLastError = true)]
			private static extern IntPtr OpenProcess(uint dwDesiredAccess, int bInheritHandle, uint dwProcessId);

			[DllImport("kernel32.dll", SetLastError = true)]
			private static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, uint flAllocationType, uint flProtect);

			[DllImport("kernel32.dll", SetLastError = true)]
			private static extern int WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] buffer, uint size, int lpNumberOfBytesWritten);
		}
	}
}

-------
Module
-------

using Microsoft.Win32;
using System;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace EasyExploits
{
	public class Module
	{
		private WebClient wc = new WebClient();

		private bool CheckLastestDll(RegistryKey registryKey)
		{
			string[] array = this.wc.DownloadString("https://raw.githubusercontent.com/GreenMs02/Update/master/Module.txt").Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
			if (!(array[2] == "true"))
			{
				return false;
			}
			if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Roblox\\Versions\\" + array[3]))
			{
				registryKey.SetValue("Ver", array[3]);
				return true;
			}
			return false;
		}

		private bool CheckDllUpdate()
		{
			string[] array = this.wc.DownloadString("https://raw.githubusercontent.com/GreenMs02/Update/master/Module.txt").Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\\\CoCO", true);
			if (registryKey == null)
			{
				registryKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\\\CoCO");
				registryKey.SetValue("Ver", "0");
			}
			else
			{
				if (registryKey.GetValue("Ver").ToString() != array[0])
				{
					registryKey.SetValue("Ver", array[0]);
					return true;
				}
				if (registryKey.GetValue("Ver").ToString() != array[3] && this.CheckLastestDll(registryKey))
				{
					return true;
				}
			}
			return !File.Exists("EasyExploitsDLL.dll");
		}

		private bool DownloadDLL()
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\\\CoCO", true);
			string[] array = this.wc.DownloadString("https://raw.githubusercontent.com/GreenMs02/Update/master/Module.txt").Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
			if (registryKey.GetValue("Ver").ToString() == array[3] && this.CheckLastestDll(registryKey))
			{
				this.wc.DownloadFile(array[4], "EasyExploitsDLL.dll");
			}
			else
			{
				this.wc.DownloadFile(array[1], "EasyExploitsDLL.dll");
			}
			return File.Exists("EasyExploitsDLL.dll");
		}

		public void ExecuteScript(string Script)
		{
			if (Module.namedPipeExist("ocybedam"))
			{
				using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", "ocybedam", PipeDirection.Out))
				{
					namedPipeClientStream.Connect();
					using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream, Encoding.Default, 999999))
					{
						streamWriter.Write(Script);
						streamWriter.Dispose();
					}
					namedPipeClientStream.Dispose();
				}
				return;
			}
			if (File.Exists("EasyExploitsDLL.dll"))
			{
				MessageBox.Show("Please attach!", "NamedPipeDoesntExist", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return;
			}
			MessageBox.Show("Please turn off your antivirus! bruh", "DLLDoesntExist", MessageBoxButtons.OK, MessageBoxIcon.Hand);
		}

		private void InjectDLL()
		{
			DLLInjection.DllInjectionResult dllInjectionResult = DLLInjection.DllInjector.GetInstance.Inject("RobloxPlayerBeta", Application.StartupPath + "\\EasyExploitsDLL.dll");
			if (dllInjectionResult == DLLInjection.DllInjectionResult.Success)
			{
				return;
			}
			switch (dllInjectionResult)
			{
			case DLLInjection.DllInjectionResult.DllNotFound:
				MessageBox.Show("Couldn't find the dll!", "Error: Dll Not Found", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return;
			case DLLInjection.DllInjectionResult.GameProcessNotFound:
				MessageBox.Show("No ROBLOX process found!", "Game Process Not Found", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return;
			case DLLInjection.DllInjectionResult.InjectionFailed:
				MessageBox.Show("Injection failed!", "Injection Failed", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return;
			default:
				return;
			}
		}

		public void LaunchExploit()
		{
			if (Module.namedPipeExist("ocybedam"))
			{
				MessageBox.Show("Already Attached!", "NamedPipeExist!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return;
			}
			if (!this.CheckDllUpdate() && File.Exists("EasyExploitsDLL.dll"))
			{
				this.InjectDLL();
				return;
			}
			if (this.DownloadDLL())
			{
				this.InjectDLL();
				return;
			}
			MessageBox.Show("Cant download the lastest version!", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Hand);
		}

		private static bool namedPipeExist(string pipeName)
		{
			bool flag;
			try
			{
				if (!Module.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", pipeName)), 0))
				{
					int lastWin32Error = Marshal.GetLastWin32Error();
					if (lastWin32Error == 0)
					{
						flag = false;
						bool result = flag;
						return result;
					}
					if (lastWin32Error == 2)
					{
						flag = false;
						bool result = flag;
						return result;
					}
				}
				flag = true;
			}
			catch (Exception)
			{
				flag = false;
			}
			return flag;
		}

		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		private static extern bool WaitNamedPipe(string name, int timeout);
	}
}
